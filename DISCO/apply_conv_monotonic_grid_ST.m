function [X_eq,Y_eq,IMG_eq] = apply_conv_monotonic_grid_ST(conv_monotonic_grid_ST,img_gray,axis_flag)
% Apply index conversion (nearest neighborhood) to obtain 'img_gray' in
% real world coordenate grid, and equidistant grid (monotonic and
% ascending).
%
% Input:
%    conv_monotonic_grid_ST: conversion to monotonic grid structure,
%    obtained by the functions 'georeferenceDJIFrame_byCaltech_EQ' or
%    'georeferenceDJIFrame_byCaltech_EQ_v2'.
%         conv_monotonic_grid_ST.LinearInd_grid: linear index used for 
%                                                conversion. 
%         conv_monotonic_grid_ST.LinearInd_img: corresponding linear index
%                    to 'LinearInd_grid' in the original grey scale image.
%         conv_monotonic_grid_ST.grid_d1_RW_2d: 1 dimension Real Wold 2d grid. 
%         conv_monotonic_grid_ST.grid_d2_RW_2d: 2 dimension Real Wold 2d grid.  
%         conv_monotonic_grid_ST.size_original_image: size of the original image.
%         conv_monotonic_grid_ST.dxdy: outout grid resoultion.
%    img_gray: grey image.
%    axis_flag: flag for swithc x and y axis, and 1 and second dimension.
%           axis_flag = 1 when conv_monotonic_grid_ST is generated by 
%                       'georeferenceDJIFrame_byCaltech_EQ'. 
%           axis_flag = 0 when conv_monotonic_grid_ST is generated by 
%                       'georeferenceDJIFrame_byCaltech_EQ_v2'
%
% Output:
%     X_eq: X real world coordenate grid 2d (x,y) in meters
%     Y_eq: Y real world coordenate grid 2d (x,y) in meters
%     IMG_eq: undistorted image corresponding to X_eq and Y_eq
%
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% (C) 2019, Ruben Carrasco <ruben.carrasco@hzg.de>
%
% This file is part of DISCO
%
% DISCO has been developed by Department of Radar Hydrography, at
% Helmholtz-Zentrum Geesthacht Centre for Materials and Coastal Research 
% (Germany), based in the work exposed in: 
% 
% M. Stre√üer, R. Carrasco and J. Horstmann, "Video-Based Estimation 
% of Surface Currents Using a Low-Cost Quadcopter," in IEEE Geoscience 
% and Remote Sensing Letters, vol. 14, no. 11, pp. 2027-2031, Nov. 2017.
% doi: 10.1109/LGRS.2017.2749120
%
%
% DISCO is free software: you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation, either version 3 of the License, or
% (at your option) any later version.
%
% DISCO is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with DISCO.  If not, see <http://www.gnu.org/licenses/>.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



if exist('axis_flag','var') == 0
    axis_flag = 0;
end

% check image size
if any(size(img_gray) ~= conv_monotonic_grid_ST.size_original_image)
   error('apply_conv_monotonic_grid_ST: image size not valid for conv_monotonic_grid_ST'); 
end

% % apply conversion
IMG_eq = nan(size(conv_monotonic_grid_ST.grid_d1_RW_2d));
IMG_eq(conv_monotonic_grid_ST.LinearInd_grid) = img_gray(conv_monotonic_grid_ST.LinearInd_img);

% generate grid according flag
if axis_flag == 1
    % x => dim 2
    X_eq = conv_monotonic_grid_ST.grid_d2_RW_2d;
    % y => dim 1
    Y_eq = conv_monotonic_grid_ST.grid_d1_RW_2d;
    
    % exchange dim1 and dim2
    X_eq = permute(X_eq,[2 1]);
    Y_eq = permute(Y_eq,[2 1]);
    IMG_eq = permute(IMG_eq,[2 1]);
    
else 
    % x => dim 1
    X_eq = conv_monotonic_grid_ST.grid_d1_RW_2d;
    % y => dim 2
    Y_eq = conv_monotonic_grid_ST.grid_d2_RW_2d;
end

% % plot
% figure;
% pcolor(X_eq,Y_eq,IMG_eq);
% shading flat;
% axis xy equal tight;
% colormap(gray);


end

